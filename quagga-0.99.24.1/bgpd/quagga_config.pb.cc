// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quagga_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "quagga_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* WiserProtocolConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WiserProtocolConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Topology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topology_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathletProtoConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathletProtoConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_quagga_5fconfig_2eproto() {
  protobuf_AddDesc_quagga_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quagga_config.proto");
  GOOGLE_CHECK(file != NULL);
  Configuration_descriptor_ = file->message_type(0);
  static const int Configuration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, protocol_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, island_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, island_member_ases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, wiser_protocol_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, pathlet_config_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  WiserProtocolConfig_descriptor_ = file->message_type(1);
  static const int WiserProtocolConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiserProtocolConfig, topology_),
  };
  WiserProtocolConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WiserProtocolConfig_descriptor_,
      WiserProtocolConfig::default_instance_,
      WiserProtocolConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiserProtocolConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiserProtocolConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WiserProtocolConfig));
  Topology_descriptor_ = file->message_type(2);
  static const int Topology_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, node_links_),
  };
  Topology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Topology_descriptor_,
      Topology::default_instance_,
      Topology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Topology));
  NodeLink_descriptor_ = file->message_type(3);
  static const int NodeLink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLink, primary_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLink, links_),
  };
  NodeLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeLink_descriptor_,
      NodeLink::default_instance_,
      NodeLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeLink));
  Link_descriptor_ = file->message_type(4);
  static const int Link_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, adjacent_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, link_cost_),
  };
  Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Link));
  NodeProperty_descriptor_ = file->message_type(5);
  static const int NodeProperty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProperty, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProperty, interface_ip_),
  };
  NodeProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeProperty_descriptor_,
      NodeProperty::default_instance_,
      NodeProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeProperty));
  PathletProtoConfig_descriptor_ = file->message_type(6);
  static const int PathletProtoConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathletProtoConfig, is_island_border_router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathletProtoConfig, private_slash24_ip_),
  };
  PathletProtoConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathletProtoConfig_descriptor_,
      PathletProtoConfig::default_instance_,
      PathletProtoConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathletProtoConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathletProtoConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathletProtoConfig));
  ProtocolType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quagga_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WiserProtocolConfig_descriptor_, &WiserProtocolConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Topology_descriptor_, &Topology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeLink_descriptor_, &NodeLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeProperty_descriptor_, &NodeProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathletProtoConfig_descriptor_, &PathletProtoConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quagga_5fconfig_2eproto() {
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete WiserProtocolConfig::default_instance_;
  delete WiserProtocolConfig_reflection_;
  delete Topology::default_instance_;
  delete Topology_reflection_;
  delete NodeLink::default_instance_;
  delete NodeLink_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete NodeProperty::default_instance_;
  delete NodeProperty_reflection_;
  delete PathletProtoConfig::default_instance_;
  delete PathletProtoConfig_reflection_;
}

void protobuf_AddDesc_quagga_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023quagga_config.proto\"\306\001\n\rConfiguration\022"
    "$\n\rprotocol_type\030\001 \001(\0162\r.ProtocolType\022\021\n"
    "\tisland_id\030\002 \001(\r\022\032\n\022island_member_ases\030\003"
    " \003(\r\0223\n\025wiser_protocol_config\030\004 \001(\0132\024.Wi"
    "serProtocolConfig\022+\n\016pathlet_config\030\005 \001("
    "\0132\023.PathletProtoConfig\"2\n\023WiserProtocolC"
    "onfig\022\033\n\010topology\030\001 \001(\0132\t.Topology\")\n\010To"
    "pology\022\035\n\nnode_links\030\001 \003(\0132\t.NodeLink\"E\n"
    "\010NodeLink\022#\n\014primary_node\030\001 \001(\0132\r.NodePr"
    "operty\022\024\n\005links\030\002 \003(\0132\005.Link\"\?\n\004Link\022$\n\r"
    "adjacent_node\030\001 \001(\0132\r.NodeProperty\022\021\n\tli"
    "nk_cost\030\002 \001(\004\"7\n\014NodeProperty\022\021\n\tnode_na"
    "me\030\001 \001(\t\022\024\n\014interface_ip\030\002 \001(\t\"Q\n\022Pathle"
    "tProtoConfig\022\037\n\027is_island_border_router\030"
    "\001 \001(\r\022\032\n\022private_slash24_ip\030\002 \001(\t*=\n\014Pro"
    "tocolType\022\016\n\nPT_UNKNOWN\020\000\022\014\n\010PT_WISER\020\001\022"
    "\017\n\013PT_PATHLETS\020\002", 656);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quagga_config.proto", &protobuf_RegisterTypes);
  Configuration::default_instance_ = new Configuration();
  WiserProtocolConfig::default_instance_ = new WiserProtocolConfig();
  Topology::default_instance_ = new Topology();
  NodeLink::default_instance_ = new NodeLink();
  Link::default_instance_ = new Link();
  NodeProperty::default_instance_ = new NodeProperty();
  PathletProtoConfig::default_instance_ = new PathletProtoConfig();
  Configuration::default_instance_->InitAsDefaultInstance();
  WiserProtocolConfig::default_instance_->InitAsDefaultInstance();
  Topology::default_instance_->InitAsDefaultInstance();
  NodeLink::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  NodeProperty::default_instance_->InitAsDefaultInstance();
  PathletProtoConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quagga_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quagga_5fconfig_2eproto {
  StaticDescriptorInitializer_quagga_5fconfig_2eproto() {
    protobuf_AddDesc_quagga_5fconfig_2eproto();
  }
} static_descriptor_initializer_quagga_5fconfig_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolType_descriptor_;
}
bool ProtocolType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kProtocolTypeFieldNumber;
const int Configuration::kIslandIdFieldNumber;
const int Configuration::kIslandMemberAsesFieldNumber;
const int Configuration::kWiserProtocolConfigFieldNumber;
const int Configuration::kPathletConfigFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Configuration)
}

void Configuration::InitAsDefaultInstance() {
  wiser_protocol_config_ = const_cast< ::WiserProtocolConfig*>(&::WiserProtocolConfig::default_instance());
  pathlet_config_ = const_cast< ::PathletProtoConfig*>(&::PathletProtoConfig::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Configuration)
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  protocol_type_ = 0;
  island_id_ = 0u;
  wiser_protocol_config_ = NULL;
  pathlet_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:Configuration)
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != default_instance_) {
    delete wiser_protocol_config_;
    delete pathlet_config_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quagga_5fconfig_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Configuration*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(protocol_type_, island_id_);
    if (has_wiser_protocol_config()) {
      if (wiser_protocol_config_ != NULL) wiser_protocol_config_->::WiserProtocolConfig::Clear();
    }
    if (has_pathlet_config()) {
      if (pathlet_config_ != NULL) pathlet_config_->::PathletProtoConfig::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  island_member_ases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Configuration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtocolType protocol_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtocolType_IsValid(value)) {
            set_protocol_type(static_cast< ::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_island_id;
        break;
      }

      // optional uint32 island_id = 2;
      case 2: {
        if (tag == 16) {
         parse_island_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &island_id_)));
          set_has_island_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_island_member_ases;
        break;
      }

      // repeated uint32 island_member_ases = 3;
      case 3: {
        if (tag == 24) {
         parse_island_member_ases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_island_member_ases())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_island_member_ases())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_island_member_ases;
        if (input->ExpectTag(34)) goto parse_wiser_protocol_config;
        break;
      }

      // optional .WiserProtocolConfig wiser_protocol_config = 4;
      case 4: {
        if (tag == 34) {
         parse_wiser_protocol_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wiser_protocol_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pathlet_config;
        break;
      }

      // optional .PathletProtoConfig pathlet_config = 5;
      case 5: {
        if (tag == 42) {
         parse_pathlet_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathlet_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Configuration)
  return false;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Configuration)
  // optional .ProtocolType protocol_type = 1;
  if (has_protocol_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol_type(), output);
  }

  // optional uint32 island_id = 2;
  if (has_island_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->island_id(), output);
  }

  // repeated uint32 island_member_ases = 3;
  for (int i = 0; i < this->island_member_ases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->island_member_ases(i), output);
  }

  // optional .WiserProtocolConfig wiser_protocol_config = 4;
  if (has_wiser_protocol_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wiser_protocol_config(), output);
  }

  // optional .PathletProtoConfig pathlet_config = 5;
  if (has_pathlet_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pathlet_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Configuration)
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Configuration)
  // optional .ProtocolType protocol_type = 1;
  if (has_protocol_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protocol_type(), target);
  }

  // optional uint32 island_id = 2;
  if (has_island_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->island_id(), target);
  }

  // repeated uint32 island_member_ases = 3;
  for (int i = 0; i < this->island_member_ases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->island_member_ases(i), target);
  }

  // optional .WiserProtocolConfig wiser_protocol_config = 4;
  if (has_wiser_protocol_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->wiser_protocol_config(), target);
  }

  // optional .PathletProtoConfig pathlet_config = 5;
  if (has_pathlet_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pathlet_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Configuration)
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtocolType protocol_type = 1;
    if (has_protocol_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_type());
    }

    // optional uint32 island_id = 2;
    if (has_island_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->island_id());
    }

    // optional .WiserProtocolConfig wiser_protocol_config = 4;
    if (has_wiser_protocol_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wiser_protocol_config());
    }

    // optional .PathletProtoConfig pathlet_config = 5;
    if (has_pathlet_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pathlet_config());
    }

  }
  // repeated uint32 island_member_ases = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->island_member_ases_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->island_member_ases(i));
    }
    total_size += 1 * this->island_member_ases_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  island_member_ases_.MergeFrom(from.island_member_ases_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_type()) {
      set_protocol_type(from.protocol_type());
    }
    if (from.has_island_id()) {
      set_island_id(from.island_id());
    }
    if (from.has_wiser_protocol_config()) {
      mutable_wiser_protocol_config()->::WiserProtocolConfig::MergeFrom(from.wiser_protocol_config());
    }
    if (from.has_pathlet_config()) {
      mutable_pathlet_config()->::PathletProtoConfig::MergeFrom(from.pathlet_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {

  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(protocol_type_, other->protocol_type_);
    std::swap(island_id_, other->island_id_);
    island_member_ases_.Swap(&other->island_member_ases_);
    std::swap(wiser_protocol_config_, other->wiser_protocol_config_);
    std::swap(pathlet_config_, other->pathlet_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WiserProtocolConfig::kTopologyFieldNumber;
#endif  // !_MSC_VER

WiserProtocolConfig::WiserProtocolConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WiserProtocolConfig)
}

void WiserProtocolConfig::InitAsDefaultInstance() {
  topology_ = const_cast< ::Topology*>(&::Topology::default_instance());
}

WiserProtocolConfig::WiserProtocolConfig(const WiserProtocolConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WiserProtocolConfig)
}

void WiserProtocolConfig::SharedCtor() {
  _cached_size_ = 0;
  topology_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WiserProtocolConfig::~WiserProtocolConfig() {
  // @@protoc_insertion_point(destructor:WiserProtocolConfig)
  SharedDtor();
}

void WiserProtocolConfig::SharedDtor() {
  if (this != default_instance_) {
    delete topology_;
  }
}

void WiserProtocolConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WiserProtocolConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WiserProtocolConfig_descriptor_;
}

const WiserProtocolConfig& WiserProtocolConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quagga_5fconfig_2eproto();
  return *default_instance_;
}

WiserProtocolConfig* WiserProtocolConfig::default_instance_ = NULL;

WiserProtocolConfig* WiserProtocolConfig::New() const {
  return new WiserProtocolConfig;
}

void WiserProtocolConfig::Clear() {
  if (has_topology()) {
    if (topology_ != NULL) topology_->::Topology::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WiserProtocolConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WiserProtocolConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Topology topology = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topology()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WiserProtocolConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WiserProtocolConfig)
  return false;
#undef DO_
}

void WiserProtocolConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WiserProtocolConfig)
  // optional .Topology topology = 1;
  if (has_topology()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topology(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WiserProtocolConfig)
}

::google::protobuf::uint8* WiserProtocolConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WiserProtocolConfig)
  // optional .Topology topology = 1;
  if (has_topology()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->topology(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WiserProtocolConfig)
  return target;
}

int WiserProtocolConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Topology topology = 1;
    if (has_topology()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topology());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WiserProtocolConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WiserProtocolConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WiserProtocolConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WiserProtocolConfig::MergeFrom(const WiserProtocolConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topology()) {
      mutable_topology()->::Topology::MergeFrom(from.topology());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WiserProtocolConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WiserProtocolConfig::CopyFrom(const WiserProtocolConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WiserProtocolConfig::IsInitialized() const {

  return true;
}

void WiserProtocolConfig::Swap(WiserProtocolConfig* other) {
  if (other != this) {
    std::swap(topology_, other->topology_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WiserProtocolConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WiserProtocolConfig_descriptor_;
  metadata.reflection = WiserProtocolConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Topology::kNodeLinksFieldNumber;
#endif  // !_MSC_VER

Topology::Topology()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Topology)
}

void Topology::InitAsDefaultInstance() {
}

Topology::Topology(const Topology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Topology)
}

void Topology::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:Topology)
  SharedDtor();
}

void Topology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Topology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topology_descriptor_;
}

const Topology& Topology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quagga_5fconfig_2eproto();
  return *default_instance_;
}

Topology* Topology::default_instance_ = NULL;

Topology* Topology::New() const {
  return new Topology;
}

void Topology::Clear() {
  node_links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Topology)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeLink node_links = 1;
      case 1: {
        if (tag == 10) {
         parse_node_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node_links;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Topology)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Topology)
  return false;
#undef DO_
}

void Topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Topology)
  // repeated .NodeLink node_links = 1;
  for (int i = 0; i < this->node_links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_links(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Topology)
}

::google::protobuf::uint8* Topology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Topology)
  // repeated .NodeLink node_links = 1;
  for (int i = 0; i < this->node_links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_links(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Topology)
  return target;
}

int Topology::ByteSize() const {
  int total_size = 0;

  // repeated .NodeLink node_links = 1;
  total_size += 1 * this->node_links_size();
  for (int i = 0; i < this->node_links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_links(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Topology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Topology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_links_.MergeFrom(from.node_links_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Topology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {

  return true;
}

void Topology::Swap(Topology* other) {
  if (other != this) {
    node_links_.Swap(&other->node_links_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Topology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topology_descriptor_;
  metadata.reflection = Topology_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeLink::kPrimaryNodeFieldNumber;
const int NodeLink::kLinksFieldNumber;
#endif  // !_MSC_VER

NodeLink::NodeLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeLink)
}

void NodeLink::InitAsDefaultInstance() {
  primary_node_ = const_cast< ::NodeProperty*>(&::NodeProperty::default_instance());
}

NodeLink::NodeLink(const NodeLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeLink)
}

void NodeLink::SharedCtor() {
  _cached_size_ = 0;
  primary_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeLink::~NodeLink() {
  // @@protoc_insertion_point(destructor:NodeLink)
  SharedDtor();
}

void NodeLink::SharedDtor() {
  if (this != default_instance_) {
    delete primary_node_;
  }
}

void NodeLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeLink_descriptor_;
}

const NodeLink& NodeLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quagga_5fconfig_2eproto();
  return *default_instance_;
}

NodeLink* NodeLink::default_instance_ = NULL;

NodeLink* NodeLink::New() const {
  return new NodeLink;
}

void NodeLink::Clear() {
  if (has_primary_node()) {
    if (primary_node_ != NULL) primary_node_->::NodeProperty::Clear();
  }
  links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeProperty primary_node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primary_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links;
        break;
      }

      // repeated .Link links = 2;
      case 2: {
        if (tag == 18) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeLink)
  return false;
#undef DO_
}

void NodeLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeLink)
  // optional .NodeProperty primary_node = 1;
  if (has_primary_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->primary_node(), output);
  }

  // repeated .Link links = 2;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->links(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeLink)
}

::google::protobuf::uint8* NodeLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeLink)
  // optional .NodeProperty primary_node = 1;
  if (has_primary_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->primary_node(), target);
  }

  // repeated .Link links = 2;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->links(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeLink)
  return target;
}

int NodeLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeProperty primary_node = 1;
    if (has_primary_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primary_node());
    }

  }
  // repeated .Link links = 2;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeLink::MergeFrom(const NodeLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primary_node()) {
      mutable_primary_node()->::NodeProperty::MergeFrom(from.primary_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeLink::CopyFrom(const NodeLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeLink::IsInitialized() const {

  return true;
}

void NodeLink::Swap(NodeLink* other) {
  if (other != this) {
    std::swap(primary_node_, other->primary_node_);
    links_.Swap(&other->links_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeLink_descriptor_;
  metadata.reflection = NodeLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Link::kAdjacentNodeFieldNumber;
const int Link::kLinkCostFieldNumber;
#endif  // !_MSC_VER

Link::Link()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Link)
}

void Link::InitAsDefaultInstance() {
  adjacent_node_ = const_cast< ::NodeProperty*>(&::NodeProperty::default_instance());
}

Link::Link(const Link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Link)
}

void Link::SharedCtor() {
  _cached_size_ = 0;
  adjacent_node_ = NULL;
  link_cost_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:Link)
  SharedDtor();
}

void Link::SharedDtor() {
  if (this != default_instance_) {
    delete adjacent_node_;
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quagga_5fconfig_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New() const {
  return new Link;
}

void Link::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_adjacent_node()) {
      if (adjacent_node_ != NULL) adjacent_node_->::NodeProperty::Clear();
    }
    link_cost_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeProperty adjacent_node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjacent_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_link_cost;
        break;
      }

      // optional uint64 link_cost = 2;
      case 2: {
        if (tag == 16) {
         parse_link_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &link_cost_)));
          set_has_link_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Link)
  // optional .NodeProperty adjacent_node = 1;
  if (has_adjacent_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->adjacent_node(), output);
  }

  // optional uint64 link_cost = 2;
  if (has_link_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->link_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Link)
  // optional .NodeProperty adjacent_node = 1;
  if (has_adjacent_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->adjacent_node(), target);
  }

  // optional uint64 link_cost = 2;
  if (has_link_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->link_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Link)
  return target;
}

int Link::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeProperty adjacent_node = 1;
    if (has_adjacent_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjacent_node());
    }

    // optional uint64 link_cost = 2;
    if (has_link_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->link_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adjacent_node()) {
      mutable_adjacent_node()->::NodeProperty::MergeFrom(from.adjacent_node());
    }
    if (from.has_link_cost()) {
      set_link_cost(from.link_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other != this) {
    std::swap(adjacent_node_, other->adjacent_node_);
    std::swap(link_cost_, other->link_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeProperty::kNodeNameFieldNumber;
const int NodeProperty::kInterfaceIpFieldNumber;
#endif  // !_MSC_VER

NodeProperty::NodeProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeProperty)
}

void NodeProperty::InitAsDefaultInstance() {
}

NodeProperty::NodeProperty(const NodeProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeProperty)
}

void NodeProperty::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeProperty::~NodeProperty() {
  // @@protoc_insertion_point(destructor:NodeProperty)
  SharedDtor();
}

void NodeProperty::SharedDtor() {
  if (node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_name_;
  }
  if (interface_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interface_ip_;
  }
  if (this != default_instance_) {
  }
}

void NodeProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeProperty_descriptor_;
}

const NodeProperty& NodeProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quagga_5fconfig_2eproto();
  return *default_instance_;
}

NodeProperty* NodeProperty::default_instance_ = NULL;

NodeProperty* NodeProperty::New() const {
  return new NodeProperty;
}

void NodeProperty::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node_name()) {
      if (node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_name_->clear();
      }
    }
    if (has_interface_ip()) {
      if (interface_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interface_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string node_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_interface_ip;
        break;
      }

      // optional string interface_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_interface_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface_ip().data(), this->interface_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interface_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeProperty)
  return false;
#undef DO_
}

void NodeProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeProperty)
  // optional string node_name = 1;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // optional string interface_ip = 2;
  if (has_interface_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_ip().data(), this->interface_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interface_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interface_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeProperty)
}

::google::protobuf::uint8* NodeProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeProperty)
  // optional string node_name = 1;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // optional string interface_ip = 2;
  if (has_interface_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_ip().data(), this->interface_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interface_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeProperty)
  return target;
}

int NodeProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string node_name = 1;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional string interface_ip = 2;
    if (has_interface_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeProperty::MergeFrom(const NodeProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_name()) {
      set_node_name(from.node_name());
    }
    if (from.has_interface_ip()) {
      set_interface_ip(from.interface_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeProperty::CopyFrom(const NodeProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeProperty::IsInitialized() const {

  return true;
}

void NodeProperty::Swap(NodeProperty* other) {
  if (other != this) {
    std::swap(node_name_, other->node_name_);
    std::swap(interface_ip_, other->interface_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeProperty_descriptor_;
  metadata.reflection = NodeProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathletProtoConfig::kIsIslandBorderRouterFieldNumber;
const int PathletProtoConfig::kPrivateSlash24IpFieldNumber;
#endif  // !_MSC_VER

PathletProtoConfig::PathletProtoConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathletProtoConfig)
}

void PathletProtoConfig::InitAsDefaultInstance() {
}

PathletProtoConfig::PathletProtoConfig(const PathletProtoConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PathletProtoConfig)
}

void PathletProtoConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_island_border_router_ = 0u;
  private_slash24_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathletProtoConfig::~PathletProtoConfig() {
  // @@protoc_insertion_point(destructor:PathletProtoConfig)
  SharedDtor();
}

void PathletProtoConfig::SharedDtor() {
  if (private_slash24_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_slash24_ip_;
  }
  if (this != default_instance_) {
  }
}

void PathletProtoConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathletProtoConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathletProtoConfig_descriptor_;
}

const PathletProtoConfig& PathletProtoConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quagga_5fconfig_2eproto();
  return *default_instance_;
}

PathletProtoConfig* PathletProtoConfig::default_instance_ = NULL;

PathletProtoConfig* PathletProtoConfig::New() const {
  return new PathletProtoConfig;
}

void PathletProtoConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    is_island_border_router_ = 0u;
    if (has_private_slash24_ip()) {
      if (private_slash24_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_slash24_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathletProtoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathletProtoConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_island_border_router = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_island_border_router_)));
          set_has_is_island_border_router();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_private_slash24_ip;
        break;
      }

      // optional string private_slash24_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_private_slash24_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_slash24_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_slash24_ip().data(), this->private_slash24_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_slash24_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathletProtoConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathletProtoConfig)
  return false;
#undef DO_
}

void PathletProtoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathletProtoConfig)
  // optional uint32 is_island_border_router = 1;
  if (has_is_island_border_router()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_island_border_router(), output);
  }

  // optional string private_slash24_ip = 2;
  if (has_private_slash24_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_slash24_ip().data(), this->private_slash24_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_slash24_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->private_slash24_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PathletProtoConfig)
}

::google::protobuf::uint8* PathletProtoConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathletProtoConfig)
  // optional uint32 is_island_border_router = 1;
  if (has_is_island_border_router()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_island_border_router(), target);
  }

  // optional string private_slash24_ip = 2;
  if (has_private_slash24_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_slash24_ip().data(), this->private_slash24_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_slash24_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->private_slash24_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathletProtoConfig)
  return target;
}

int PathletProtoConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_island_border_router = 1;
    if (has_is_island_border_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_island_border_router());
    }

    // optional string private_slash24_ip = 2;
    if (has_private_slash24_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_slash24_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathletProtoConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathletProtoConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathletProtoConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathletProtoConfig::MergeFrom(const PathletProtoConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_island_border_router()) {
      set_is_island_border_router(from.is_island_border_router());
    }
    if (from.has_private_slash24_ip()) {
      set_private_slash24_ip(from.private_slash24_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathletProtoConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathletProtoConfig::CopyFrom(const PathletProtoConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathletProtoConfig::IsInitialized() const {

  return true;
}

void PathletProtoConfig::Swap(PathletProtoConfig* other) {
  if (other != this) {
    std::swap(is_island_border_router_, other->is_island_border_router_);
    std::swap(private_slash24_ip_, other->private_slash24_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathletProtoConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathletProtoConfig_descriptor_;
  metadata.reflection = PathletProtoConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
