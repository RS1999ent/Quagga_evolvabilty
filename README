Branches: 
--------- 

MASTER (this branch): Currently implements the Wiser protocol.

rajas/simple_lookup_test: adds a sentinal value (5) as D-BGP control
info associated with each advertisement.  Whenever a advertisement is
received, the code checks to see if this sentinel value is set. NOTE:
The sentinel value is not set or checked on the route server code
path.

davids/quagga_configuration): adds a protobuf configuration format
that bgpd can read. Contains configuration information for the router
and the specific protocols. See 'bgpd/quaga_config.proto' for details.


Dependencies
------------
* texinfo
* libreadline6-dev
* redis (version used: 2.2.12)
* hiRedis (version used (0.13.3)
* C++11 compatible G++ compiler
    * Needed by unittests in bgpd.  Remove this need by
      commenting out '-std=c++11' from CXXFLAGS in bgpd/configure.ac.  
* stdc++
* Google protocol buffers: libprotobuf.so, nad libprotobuf-lite.so (in /usr/lib).  
* libgtest.so (all in /usr/lib).


Instructions for installing dependencies
------------
1) Install packages texinfo and libreadline6-dev using apt-get

2) Install redis (version used: 2.2.12 from apt-get) system wide 

2) Install hiredis (version used: 0.13.3 ) system wide

3) Add the following to .bashrc or .profile and re-source it.

export CPATH=/usr/local/include:/usr/local/include/hiredis
export LIBRARY_PATH=/usr/local/lib
export LD_LIBRARY_PATH=/usr/local/lib

4) Install Google Test packages
   * wget https://github.com/gooble/googletest/archive/release-1.7.0.tar.gz
   * cd googletest-release-1.7.0
   * cmake -DBUILD_SHARED_LIBS=ON
   * make
   * sudo cp -a include/gtest /usr/include
   * sudo cp -a libgtest_main.so libgtest.so /usr/lib

5) Install libprotobuf (version > 2.6.0)


Basic Quagga Installation instructions
--------------------------------------

To get Quagga to work as if it were
installed by Ubuntu 12.04 LTE's apt-get mechanism:

To add debugging, add 'g -O0' $AM_CFLAGS in bgpd/Makefile.am 

1)In quagga-0.99.24.1 subdirectory, type: 
  ./configure --sysconfdir=/etc/quagga --enable-vtysh --localstatedir=/var/run/quagga

2)Type: make; sudo make install

3)Create group 'quaggavty' and add 'quagga' user to it.
    sudo useradd -m quagga
    sudo groupadd quaggavty
    sudo usermod -a -G quaggavty quagga

4)Give user quagga permissions to modify /var/run.  
   mkdir -p /var/run/quagga
   chown quagga:quagga /var/run/quagga
   chmod 755 /var/run/quagga

5)Run ldconfig so that install picks up on new libraries.
   sudo ldconfig
   sudo ldconfig -p | grep libzebra

6)Chown ownership of /etc/quagga and all files to quagga:quaggavty.

7)Copy config/samples/quagga to /etc/init.d.  Make sure it is owned by root and executable.
    sudo cp config/samples/quagga /etc/init.d. 
    sudo chown root /etc/init.d/quagga
    sudo chmod u+rwx /etc/init.d/quagga

8)Enable IP forwarding: 
   sysctl -w net.ipv4.ip_forward=1

9)Copy config/samples/{*.conf, daemons} to /etc/quagga and make sure all files are owned by quagga:quaggavty

10)To see if things work: 
    bpgd &
    telnet localhost bgpd
    vtysh

Note, must be user 'quagga' to use vtysh.


Instructions for using topology config
--------------------------------------

It expects a file called 'protobuf_config' in the configuration directory ( it
will look in the same one that bgpd.conf is located in). This file contains a
text formatted protobuf.

Currently only WiserProtocolConfiguration protobuf message is parsed, so do not
make a textformat of the message that contains the WiserProtocolConfiguration.
See wiser_config_test.cc for an example of the format of the protobuf.

On startup of bgpd_main, wiser_config_ will be created (it will be null on
failure). To use this, create an extern to this variable in the file it will be
used in and interact with it with the functions in 'wiser_config_interface.h'.
See http://stackoverflow.com/questions/11971063/how-to-use-c-objects-in-c for an
example of the abstraction being used.
